training
refer D:\ManishaMeanStack

registration 
partial referesh 



controller			component

Angular:
Class ID 174036

Salesforce:
Class ID 174037



Angular    Features
=====================================================
1.Dependency Injection (Way of initializing dependencies)
2.Two way data binding
3.MVC
4.Testing
5.Modules,Directives,Filters,Services, Controllers 
  (Components and Templates) etc....


 What is module ?

* Module is a container for services,directives,filter,modules,dependencies

         AngularJS (1.6)                           Angular (7.0)

1. Not developed by keeping                       1.Developed specially for
    mobile devlopment in mid.                        Mobile development

2. Basic building block is                        2.Basic building block is
    Java Script Function                             a TypeScript class

3.Controllers                                    3.Components and templates

4.filters    (format,sort,search)                 4.pipes

5.services                                        5.providers

6.directives                                     6.directive   
        ng-if                                      *ngIf,*ngFor,*ngSwitchCase
        ng-repeat                                  ngModel,ngClass ,ngStyle


7.routing   (function based)                    7.routing   (JSON based) 


8.development is easy                           8.complicated



Browser understands Java Script but not Type Script

Type Script should be converted into JS and 
genderated JS should be used into HTML



Angular Team has given   "@angular/cli"  tool
to make Angular development easy. 


To install Angular CLI tool

Step 1
======
Install Node JS

set path=C:\node-v8.9.4-win-x64;


1)  node -v

2)  npm -v 


 Global installation
 ================
     npm install -g @angular/cli  <enter>  

Local Installation
==============

      npm install  @angular/cli  <enter> 




set path=D:\ManishaMeanStack\node-v8.9.1-win-x64;D:\ManishaMeanStack\angular5-cli\angular5-cli\angular5-cli\node_modules\.bin;

set path=C:\Program Files\nodejs;C:\Temp\angular\node_modules\.bin;



C:\Users\>node -v
v7.10.0

C:\Users\>npm -v
4.2.0

C:\Users\>ng -v  or angular version
    _                      _                 ____ _     ___
   / \   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|
  / ? \ | '_ \ / _` | | | | |/ _` | '__|   | |   | |    | |
 / ___ \| | | | (_| | |_| | | (_| | |      | |___| |___ | |
/_/   \_\_| |_|\__, |\__,_|_|\__,_|_|       \____|_____|___|
               |___/
@angular/cli: 1.0.0
node: 7.10.0
os: win32 x64




1.To create a angular project

         ng new <project-name>  <enter>

   Ex.  ng new angular-app-day1 <enter>

2.To run a angular project

    go to your project in command prompt

   c:\.... \angular-app-day1>npm start   <enter>   or ng serve 





Angular Component is responsible for

1.What to display   	class
2.How to display	.css
3.Where to display	.html
4.Where to inject	.selector

The package.json is organized into two groups of packages:

Dependencies are essential to running applications.
DevDependencies are only necessary to develop applications.
https://angular.io/guide/npm-packages




template:'   ' If HTML code is <=3
templateUrl:'app.com.html' If HTML code is >3


Directives add functionaliites to HTML elements

Attribute Directives   :Don't change HTML DOM Structure
========================
ngStyle
ngClass
ngSwitch
ngModel -> for input elements only
routerLink

Structural Directives  : change HTML DOM Structure
========================
*ngIf
*ngFor
*ngSwitchCase
*ngSwitchDefault

Componenet Directives
======================
<app-root></app-root>
<ng-template></ng-template>
<router-outlet></router-outlet>



Custom Attribiute Directive => ElementRef,Renderer3
============================

<div   [fgColor]="''red"    [bgColor]="'cyan'">   Hello Students!!!   </div>

Custom Structural Directive => TemplateRef,ViewcontainerRef
============================

<div   *show="true">   Hello Students!!!   </div>
<div   *hide="true">   Hello Students!!!   </div>


Data Binding 
String interpolation-->{{..}}
property binding -->[]
event binding-->()
[(ngModel)]




ngModel="-------"
[ngModel] -1 way data binding
[(ngModel)] -2 way data binding



ngClass
=========
<some-element [ngClass]="'first second'">...</some-element>

<some-element [ngClass]="['first', 'second']">...</some-element>

<some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>

<some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>

<some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>


ngStyle
======
<some-element [ngStyle]="{'font-style': styleExp}">...</some-element>

<some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>

<some-element [ngStyle]="objExp">...</some-element>


 ngSwitch
*ngSwitchCase
*ngSwitchDefault
*ngIf
*ngFor

<container-element [ngSwitch]="switch_expression">
  <some-element *ngSwitchCase="match_expression_1">...</some-element>
  <some-element *ngSwitchCase="match_expression_2">...</some-element>
  <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
  <ng-container *ngSwitchCase="match_expression_3">
    <!-- use a ng-container to group multiple root nodes -->
    <inner-element></inner-element>
    <inner-other-element></inner-other-element>
  </ng-container>
  <some-element *ngSwitchDefault>...</some-element>
</container-element>


\\10.128.32.91

unsername :trnguser1
password  :Syntel123

day2
====

ng g class <class-name>  <enter>
ng g component <component-name>  <enter>
ng g service  <service-name>  <eneter>
ng g pipe <pipe-name>  <eneter>
ng g  directive <directive-name>  <eneter>
ng g module <module-name>  <enter>
ng g module <module-name>   --routing <enter>




Pipes(Filters)       =>sort ,format and search the data
===========================================================
String
=========
lowercase
uppercase
slice
titlecase  (angular 4.0)

array
=====
slice

number
=======
number
         salary|number:'9.2-3'
           

currency

            salary|currency:'Rs'
 
date
=======
date
        dob:date:'shortDate'
        dob:date:'mediumDate'
        dob:date:'longDate'
        dob:date:'fullDate'
        dob:date:'dd-MMM-yyyy'


JS object
=========
json

Observable 
==========
async  : 

ng g p ./pipes/gender




Custom Pipe
=============
gender
orderBy


To write a custom pipe we have to create class which implements PipeTransform i/f
and we have to overide   transform method in it.



             
employees|orderBy ->sort employess by id in ascending order
employees|orderBy:'id' ->sort employess by id in ascending order
employees|orderBy:'name' ->sort employess by name in ascending order
employees|orderBy:'name':true ->sort employess by name in descending order


component
directive
custom pipe


ng g s ./service/Product
ng g m app --routing


========================================================


angular http


Nested Components

ParentComponent -> ChildComponent   ->@Input()
ChildComponent ->  ParentComponent   ->@Output()




angular custom directives
angular form validattion

Spring Boot Integration






Form Validation
===============
1.Template Driven Forms Features

Easy to use
Suitable for simple scenarios and fails for complex scenarios
Similar to AngularJS
Two way data binding(using [(NgModel)] syntax)
Minimal component code
Automatic track of the form and its data(handled by Angular)
Unit testing is another challenge

2/Reactive Forms or Model driven Features

More flexible, but needs a lot of practice
Handles any complex scenarios
No data binding is done (immutable data model preferred by most developers)
More component code and less HTML markup
Reactive transformations can be made possible such as
Handling a event based on a debounce time
Handling events when the components are distinct until changed
Adding elements dynamically
Easier unit testing


















<h1   colorIt>Hello </h1>

@Directive()
class A{

}



@Pipe()
class A{

}




@NgModule
class A{

}




@Component()
class A
{


}


@Injectable
class A{

}




class Library{
private List<Book> books;
private List<Member> members;

}




angular6 Materila Referal site
=================================


https://code.tutsplus.com/tutorials/how-to-use-material-design-in-angular-6--cms-31671




These schematics can easily be installed with the ng generate command as follows:

ng generate @angular/material:material-table --name <component-name>: generates a component that displays data with a data table
ng generate @angular/material:material-nav --name <component-name>: generates a component with a side navigation and a toolbar
ng generate @angular/material:material-dashboard --name <component-name>: generates a component that contains a dynamic grid list of cards.


ng g m app --routing
































